
-- 1) Function to get day wise orders and outputs all the days in descending order of their sales.
CREATE OR REPLACE FUNCTION get_max_sales_days() RETURNS TABLE (day_of_week VARCHAR, total_sales INT) AS
BEGIN
  RETURN QUERY
    SELECT 
      to_char(order_date, 'Day') AS day_of_week, 
      SUM(order_price) AS total_sales
    FROM 
      "order"
    GROUP BY 
      day_of_week
    ORDER BY 
      total_sales DESC, 
      day_of_week DESC
    LIMIT 7;
END;
-- 2) Product performance analysis
CREATE OR REPLACE FUNCTION get_product_sales_analysis()
RETURNS TABLE (
    product_id BIGINT,
    product_name VARCHAR(30),
    product_sales INT,
    product_performance FLOAT
)
AS 
BEGIN
    RETURN QUERY
    SELECT p.product_id, p.product_name, COUNT(*) as product_sales, 
    SUM(CASE WHEN o.returned = false THEN 1 ELSE -1 END) * p.product_price as product_performance
    FROM product p
    INNER JOIN order_item oi ON p.product_id = oi.product_id
    INNER JOIN "order" o ON oi.order_id = o.order_id
    GROUP BY p.product_id
    ORDER BY product_sales DESC;
END;

-- 3) Quaterly analysis
CREATE OR REPLACE FUNCTION quarterly_sales()
RETURNS TABLE (quarter INT, sales INT) AS 
BEGIN
    RETURN QUERY
        SELECT EXTRACT(QUARTER FROM order_date) AS quarter, SUM(quantity_total * unit_price_item) AS sales
        FROM "order"
        JOIN order_item ON "order".order_id = order_item.order_id
        GROUP BY quarter
        ORDER BY quarter;
END;

-- 4) Top 5 percent employees by sales
CREATE OR REPLACE FUNCTION top_employees_by_sales()
RETURNS TABLE (employee_name VARCHAR(30), total_sales INT) AS 
BEGIN
    RETURN QUERY
        SELECT e.employee_name, SUM(oi.quantity_total * oi.unit_price_item) AS total_sales
        FROM order_item oi
        JOIN "order" o ON o.order_id = oi.order_id
        JOIN employee e ON e.employee_id = o.employee_id
        GROUP BY e.employee_name
        ORDER BY total_sales DESC
        LIMIT (SELECT COUNT(*) * 0.05 FROM employee);
END;
-- 5)Top 5 percent loyal customer
CREATE FUNCTION get_top_5_percent_loyal_customers() 
RETURNS TABLE (
    customer_id integer,
    total_purchases integer
) AS 
BEGIN
    RETURN QUERY
    SELECT customer_id, COUNT(*) as total_purchases 
    FROM sales 
    GROUP BY customer_id 
    ORDER BY total_purchases DESC 
    LIMIT (SELECT COUNT(DISTINCT customer_id) * 0.05 FROM sales);
END; 
